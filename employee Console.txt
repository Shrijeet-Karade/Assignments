using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EmployeeConsole
{
    public class InvalidInputException : Exception
    {
        public InvalidInputException(string output) : base(output) { }
    }
    public class Employee
    {
        internal int ID = 9999, Salary, check = 0;
        String employeeName, employeeQualification, course, FilePath = "C:\\ErrorLog.txt";
        public Class1(int count)
        {
            try
            {
                Console.WriteLine("enter employeeName :");
                employeeName = Console.ReadLine();
                if (String.IsNullOrEmpty(employeeName))
                {
                    throw new ArgumentException("user attempted to keep a field empty!");
                }
                Console.WriteLine("\nenter employeeQualification :");
                employeeQualification = Console.ReadLine();
                if (String.IsNullOrEmpty(employeeQualification))
                {
                    Console.WriteLine("employeeQualification can’t be empty");
                    throw new ArgumentException("field empty!");
                }
                ID = ID + count;
                Console.WriteLine("\nenter salary :");
                Salary = Convert.ToInt32(Console.ReadLine());
                if ((employeeQualification == "BE") || (employeeQualification == "BCA") || (employeeQualification == "BSC"))
                {
                    course = "IT";
                    Console.WriteLine("\nEmployee added in IT ");
                }
                else if ((employeeQualification == "BCom") || (employeeQualification == "MCom") || (employeeQualification == "CA"))
                {
                    course = "Accounts";
                    Console.WriteLine("\nEmployee added in accounts");
                }
                else
                {
                    throw new WrongInputException(string.Format("Invalid employeeQualification!"));
                }
                check = 1;
            }
            catch (ArgumentException firstException)
            {
                Console.WriteLine("This field cannot be empty");
                Console.ReadKey();
                //log this
                using (StreamWriter writer = new StreamWriter(FilePath, true))
                {
                    writer.WriteLine("Message :" + firstException.Message + " " + Environment.NewLine + "StackTrace :" + firstException.StackTrace + " " + Environment.NewLine + "Date :" + DateTime.Now.ToString());
                }
            }
            catch (InvalidInputException secondException)
            {
                Console.WriteLine("employeeQualification wrong");
                Console.ReadKey();

                using (StreamWriter writer = new StreamWriter(FilePath, true))
                {
                    writer.WriteLine("Message :" + secondException.Message + "<br/>" + Environment.NewLine + "Stack_Trace :" + secondException.StackTrace + " " + Environment.NewLine + "Date :" + DateTime.Now.ToString());
                }
            }
            catch (Exception ex1)
            {
                Console.WriteLine("invalid");
                //log this
                using (StreamWriter writer = new StreamWriter(FilePath, true))
                {
                    writer.WriteLine("Message :" + firstException.Message + "<br/>" + Environment.NewLine + "Stack_Trace :" + firstException.StackTrace + " " + Environment.NewLine + "Date:" + DateTime.Now.ToString());
                }
            }
            finally
            {
                Console.WriteLine(" finally excetuted");
            }
        }
    }

}